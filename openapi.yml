openapi: 3.0.0
info:
  title: LappY
  version: 0.0.1
servers:
  - url: http://{ip}:{port}
    description: Development server
    variables:
      port:
        default: '8080'
      ip:
        default: localhost
paths:
  /news/search/:
    get:
      tags:
        - News
      summary: Get Search Results
      description: |-
        Find articles by search query

        Get list of articles which match with search query from database.
        If count of articles is less than 10, scrap new articles and add
        them to a database. If 'find' param is empty, return newest
        articles.
      security:
        - bearerAuth: []
      parameters:
        - name: find
          in: query
          required: false
          schema:
            type: string
            description: Write search query here
            title: Find
          description: Write search query here
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            title: Page
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            maximum: 10
            minimum: 1
            title: Limit
        - name: period
          in: query
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/Period'
            title: Period
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponseModel'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /news/{id}/:
    get:
      tags:
        - News
      summary: Get Article
      description: |-
        Get concrete article with content

        Find article by ID in database and if it exists, check if it
        has content in 'content' field. If it is, return it, else scrap
        this content. If article does not exist in db, return 404.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            title: 'Id '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendArticleModel'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
                
  /user/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - name
                - password
                - re_password
              properties:
                email:
                  type: string
                  format: email
                  example: komarnickijura@gmail.com
                name:
                  type: string
                  example: Jon Jons
                password:
                  type: string
                  minLength: 8
                  example: 1234132yhtyght65656
                re_password:
                  type: string
                  minLength: 8
                  example: 1234132yhtyght65656
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  email:
                    type: string
                    example: komarnickijura@gmail.com
                  name:
                    type: string
                    example: Jon Jons
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidEmailError'
                  - $ref: '#/components/schemas/PasswordsDoNotMatchError'
                  - $ref: '#/components/schemas/ExistingUserError'
                  - $ref: '#/components/schemas/PasswordTooShortError'
                  - $ref: '#/components/schemas/PasswordEntirelyNumericError'

  /user/activate:
    post:
      tags:
        - Authentication
      summary: Activate a user account
      description: Activates a user's account using a provided activation token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - uid
                - token
              properties:
                uid:
                  type: string
                  example: Mg
                token:
                  type: string
                  example: c0cwaz-8000073bf25813e493ccc500410f36d4
      responses:
        '204':
          description: Account activated successfully
        '400':
          description: Bad request (e.g., invalid uid or token)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidActivationTokenError'
                  - $ref: '#/components/schemas/UserAlreadyActivatedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaleTokenError'

  /user/login:
    post:
      tags:
        - Authentication
      summary: Create a JSON Web Token for user authentication
      description: Authenticates a user and generates a JWT for subsequent API access
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: komarnickijura@gmail.com
                password:
                  type: string
                  example: newgoodpassword2001
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... (JWT content)
                  refresh:
                    type: string
                    example: 8xLOxB5-5t5154a00014a154a004a0041 (optional refresh token)
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InactiveAccountError'

  /user/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh an access token using a refresh token
      description: Generates a new access token based on a valid refresh token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh
              properties:
                refresh:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MT...
      responses:
        '200':
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... (new JWT content)
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/MissingRefreshTokenError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidTokenError'
                  - $ref: '#/components/schemas/StaleTokenError'
                  - $ref: '#/components/schemas/InvalidOrExpiredTokenError'

  /user/me/reset-password:
    post:
      tags:
        - Authentication
      summary: Initiate a password reset request for a user
      description: Generates a password reset token and sends a reset email to the user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: komarnickijura@gmail.com
      responses:
        '204':
          description: Password reset request sent successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidEmailError'

  /user/me/reset-password/confirm:
    post:
      tags:
        - Authentication
      summary: Confirm a password reset request and update the user's password
      description: Validates the password reset token and sets a new password for the user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - uid
                - token
                - new_password
                - re_new_password
              properties:
                uid:
                  type: string
                  example: Mg
                token:
                  type: string
                  example: c0cwj1-7c40adff502181553d428d5817015549
                new_password:
                  type: string
                  example: newgoodpassword2001
                re_new_password:
                  type: string
                  example: newgoodpassword2001
      responses:
        '204':
          description: Password successfully changed
        '400':
            description: Bad request
            content:
              application/json:
                schema:
                  oneOf:
                    - $ref: '#/components/schemas/InvalidTokenForUserError'    
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidOrExpiredTokenError'
  
  /user/me/delete:
    delete:
      tags:
        - Authentication
      summary: Delete the current user's account
      description: Permanently removes the user's account and associated data
      security:
        - bearerAuth: []  
      requestBody:       
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  example: newgoodpassword2001
      
      responses:
        '204':
          description: User account deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidPasswordError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidOrExpiredTokenError'
                  - $ref: '#/components/schemas/UserNotFoundError'
  /questions:
    post:
      tags:
        - Question
      summary: Post a Question
      description: >
        This endpoint allows users to post questions related to specific laptops.
        Users need to provide the laptop's ID, name, and their question text. 
        The endpoint requires bearer token authentication for security purposes. 
        Upon successful posting, it returns the details of the posted question 
        including the user's information.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                laptop_id:
                  type: string
                laptop_name:
                  type: string
                comment_text:
                  type: string
              required:
                - laptop_id
                - laptop_name
                - comment_text
      responses:
        '200':
          description: Successfully posted the question
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  parent_comment_id:
                    type: string
                    nullable: true
                  user:
                    type: integer
                  user_name:
                    type: string
                  laptop_id:
                    type: string
                  laptop_name:
                    type: string
                  comment_text:
                    type: string
                  created_at:
                    type: string
                    format: date-time
        '400':
          description: Bad Request - Invalid request format
        '401':
          description: Unauthorized - Invalid or no authentication token
    get:
      tags:
        - Question
      summary: Retrieve Questions
      description: >
        This endpoint retrieves a list of questions related to a specific laptop 
        identified by its ID. It is a public endpoint and does not require 
        authentication. The response includes details such as the question ID, 
        user information, laptop ID and name, the text of the question, and 
        the creation timestamp.
      parameters:
        - name: laptop_id
          in: query
          required: true
          schema:
            type: string
          description: The ID of the laptop to retrieve questions for.
      responses:
        '200':
          description: A list of questions related to the specified laptop
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    parent_comment_id:
                      type: string
                      nullable: true
                    user:
                      type: integer
                    user_name:
                      type: string
                    laptop_id:
                      type: string
                    laptop_name:
                      type: string
                    comment_text:
                      type: string
                    created_at:
                      type: string
                      format: date-time
        '400':
          description: Bad Request - Invalid request format
  /favorites:
    get:
      tags:
        - Favorites
      summary: Retrieve Favorites List
      description: >
        This endpoint is used for retrieving a user's favorites list. It caters 
        to both authorized and unauthorized users. Authorized users need to 
        include the Authorization header in their request, while unauthorized 
        users should use a Cookie header. The endpoint returns the user's list 
        of favorite laptops.
      parameters:
        - name: Cookie
          in: header
          required: false
          schema:
            type: string
          description: Cookie header for unauthorized users.
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
          description: Authorization header for authorized users.
      responses:
        '200':
          description: A list of favorite laptops
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  # Define the properties of the laptop object as per your requirements
        '400':
          description: Bad Request - Invalid request format
    post:
      tags:
        - Favorites
      summary: Save to Favorites
      description: >
        This endpoint allows users to save a laptop to their favorites list. 
        Users can provide the laptop's ID in the request body. The endpoint 
        supports both authorized and unauthorized users. For authorized users, 
        the request must include the Authorization header, while unauthorized 
        users should include a Cookie header. The endpoint responds with a 
        confirmation message upon successful addition to the favorites list.
      parameters:
        - name: Cookie
          in: header
          required: false
          schema:
            type: string
          description: Cookie header for unauthorized users.
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
          description: Authorization header for authorized users.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                laptop_id:
                  type: string
              required:
                - laptop_id
      responses:
        '200':
          description: Successfully added the laptop to favorites
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request - Invalid request format
  /laptops:
    get:
      tags:
        - Laptops
      summary: Get list of laptops by filter patameters
      description: |-
        Get items with specifications based on optional filter parameters
      parameters:
        - name: producer
          in: query
          required: false
          schema:
            type: string
            title: Producer
          description: Producer of a laptop
        - name: series
          in: query
          required: false
          schema:
            type: string
            title: Series
          description: Series of a laptop
        - name: cpu
          in: query
          required: false
          schema:
            type: string
            title: cpu
          description: Name of processor used in a laptop
        - name: gpu
          in: query
          required: false
          schema:
            type: string
            title: gpu
          description: Name of graphics card used in a laptop
        - name: displaysize
          in: query
          required: false
          schema:
            type: string
            title: gpu
          description: Diagonal of a display
        - name: page
          in: query
          required: false
          schema:
            type: integer
            title: page
          description: Page number used for pagination of results
      responses:
        '200':
          description: Successful Response
  /laptops/{id}:
    get:
      tags:
        - Laptops
      summary: Get info about specific laptop
      description: |-
        Get document wit aggregated information about specific laptop
        including specifications, news, accesories, rating
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            title: id
      responses:
        '200':
          description: Successful Response
components:
  schemas:
    ArticleModel:
      properties:
        id:
          type: string
          title: Id
        link:
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
          title: Link
        title:
          type: string
          title: Title
        author:
          anyOf:
            - type: string
            - type: integer
              nullable: true
          title: Author
        image:
          anyOf:
            - type: string
              maxLength: 2083
              minLength: 1
              format: uri
            - type: integer
              nullable: true
          title: Image
        date:
          anyOf:
            - type: string
              format: date-time
            - type: integer
              nullable: true
          title: Date
        description:
          type: string
          title: Description
          default: ''
      type: object
      required:
        - id
        - link
        - title
      title: ArticleModel
      example:
        id: 659bcd15b6956ec3a35f01e4
        link: https://www.laptopmag.com/reviews/best-chromebooks-6
        title: Best Chromebooks of 2024
        author: Mark Anthony Ramirez
        image: https://cdn.mos.cms.futurecdn.net/9JMTNPNLsXdsEFs8KBK2x8.jpg
        date: '2024-01-03T21:43:44Z'
        description: What is the best Chromebook of 2024? No matter what your needs we have the perfect Chromebook for you based on our testing and reviews.

    ExtendArticleModel:
      properties:
        id:
          type: string
          title: Id
        link:
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
          title: Link
        title:
          type: string
          title: Title
        author:
          anyOf:
            - type: string
            - type: integer
              nullable: true
          title: Author
        image:
          anyOf:
            - type: string
              maxLength: 2083
              minLength: 1
              format: uri
            - type: integer
              nullable: true
          title: Image
        date:
          anyOf:
            - type: string
              format: date-time
            - type: integer
              nullable: true
          title: Date
        description:
          type: string
          title: Description
          default: ''
        content:
          items:
            items: {}
            type: array
          type: array
          title: Content
          default: []
      type: object
      required:
        - id
        - link
        - title
      title: ExtendArticleModel
      example:
        id: 659bcd14b6956ec3a35f01dd
        link: https://www.laptopmag.com/articles/best-laptop-for-sims-4
        title: 'Help me, Laptop: What''s the best laptop for The Sims 4?'
        author: Rami Tabari
        image: https://cdn.mos.cms.futurecdn.net/TMRAepQbmLqSX6dss5M4NF.jpg
        date: '2022-10-21T16:16:26Z'
        description: You needn't spend thousands of dollars on a gaming laptop to play some of the best PC games, especially if you're into titles that aren't very resource-heavy.
        content:
          - - paragraph
            - You needn't spend thousands of dollars on a gaming laptop to play some of the best PC games, especially if you're into titles that aren't resource-heavy. There are plenty of budget-friendly laptops under $500 that are picture-perfect for light gaming, so when a forum user asked which laptop is best for satisfying their Sims fix, we were happy to help. It's time for a deep dive down the spec requirement rabbit hole.
          - - image
            - https://cdn.mos.cms.futurecdn.net/NU64gMT2odgW5YFw9vNNgE.jpg
          - - paragraph
            - Nevnev writes, "I'm looking to get a laptop to primarily play The Sims 4. After thinking I knew about laptops and technology, I am now majorly confused when it comes to gaming specs! So, I have found a laptop but not sure if it fits the specs? if anyone can help out, I would be grateful."
          - - paragraph
            - Nevnev was originally considering an Acer Aspire 1 with an Intel Celeron N3350 processor, but that system barely has enough power to run very light games. Let's run through the required specs for The Sims 4.
          - - title
            - Minimum and recommended specs for The Sims 4
          - - paragraph
            - 'An easy choice is the 15.6-inch Acer Aspire E 15, which comes outfitted with an Intel Core i3-8130U processor, Intel UHD 620 GPU, 6GB of RAM and a 1TB HDD. (For a few more bucks, you can opt for a zippier Core i5 CPU and more powerful Nvidia GeForce MX150 GPU.) This is enough power to get you above 30 frames per second on The Sims 4, and on top of that, you''ll benefit from a wide range of ports and long battery life (8:48). '
          - - image
            - https://cdn.mos.cms.futurecdn.net/tPa8B9ruuwg6TREFJrL5Do.jpg
          - - paragraph
            - 'A solid alternative is the Huawei MateBook D 14-inch (AMD). For less than $700, you get a 2.0-GHz AMD Ryzen 5 2500U processor, 8GB of RAM, a 256GB SSD and an AMD Radeon Vega 8 Mobile GPU. It has a little more kick than the Aspire E 15, and it features a full aluminum chassis in a slimmer 14-inch build. It also has a tactile keyboard and an even longer battery life (9:16). '
          - - image
            - https://cdn.mos.cms.futurecdn.net/WtRQMfGcMYcW9BQQF8JPgi.jpg
          - - paragraph
            - If you're looking for a more premium machine, the MSI PS42 8RB Prestige ($1,299) is a solid choice, as it's packed with an Intel Core i7-8550U CPU, 16GB of RAM, a 512GB SSD and an Nvidia GeForce MX150 GPU. Featuring a slim 0.6-inch design and a wide variety of ports, it has a vivid 14-inch panel that beats the screens from the Aspire and MateBook, but its battery life (6:22) isn't anywhere near as long as what you get from those machines.
          - - paragraph
            - 'Any of these systems should satisfy the minimum requirements for The Sims 4, but if you''re in the market for more powerful gaming laptops, we''ve got you covered from every angle. For example, we can help you find the best laptop under $500 or the best business laptops for working from home. '
          - - paragraph
            - Want to turn your laptop into a gaming console? We can help with that, too.

    UserModel:
      type: object
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        name:
          type: string
          example: John Doe
        is_active:
          type: boolean
          example: true
        is_staff:
          type: boolean
          example: false

    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    Period:
      type: string
      enum:
        - last-week
        - last-month
        - all
      title: Period
    SearchResponseModel:
      properties:
        count:
          type: integer
          title: Count
          example: 1
        results:
          items:
            $ref: '#/components/schemas/ArticleModel'
          type: array
          title: Results
      type: object
      required:
        - count
        - results
      title: SearchResponseModel
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
    InvalidEmailError:
      type: object
      properties:
        email:
          type: array
          items:
            type: string
            example: "Enter a valid email address."
    PasswordsDoNotMatchError:
      type: object
      properties:
        passwords:
          type: string
          example: "Passwords do not match."
    ExistingUserError:
      type: object
      properties:
        email:
          type: array
          items:
            type: string
            example: "User account with this email already exists."
    InvalidActivationTokenError:
      type: object
      properties:
        token:
          type: string
          example: "Invalid activation token."
    UserAlreadyActivatedError:
      type: object
      properties:
        message:
          type: string
          example: "User account is already activated."
    PasswordTooShortError:
      type: object
      properties:
        password:
          type: string
          example: "This password is too short. It must contain at least 8 characters."
    PasswordEntirelyNumericError:
      type: object
      properties:
        password:
          type: string
          example: "This password is entirely numeric."
    StaleTokenError:
      type: object
      properties:
        detail:
          type: string
          example: "Stale token for given user."
    InactiveAccountError:
      type: object
      properties:
        detail:
          type: string
          example: "No active account found with the given credentials"
    InvalidTokenError:
      type: object
      properties:
        token:
          type: array
          items:
            type: string
            example: "Invalid token for given user."
    MissingRefreshTokenError:
      type: object
      properties:
        refresh:
          type: array
          items:
            type: string
            example: "This field may not be blank."
    InvalidOrExpiredTokenError:
      type: object
      properties:
        detail:
          type: string
          example: "Given token not valid for any token type"
        code:
          type: string
          example: "token_not_valid"
        messages:
          type: array
          items:
            type: object
            properties:
              token_class:
                type: string
                example: "AccessToken"
              token_type:
                type: string
                example: "access"
              message:
                type: string
                example: "Token is invalid or expired"
    InvalidTokenForUserError:
      type: object
      properties:
        token:
          type: array
          items:
            type: string
            example: "Invalid token for given user."
    UserNotFoundError:
      type: object
      properties:
        detail:
          type: string
          example: "User not found"
        code:
          type: string
          example: "user_not_found"
    InvalidPasswordError:
      type: object
      properties:
        current_password:
          type: array
          items:
            type: string
            example: "Invalid password."
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
